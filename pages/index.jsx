import Head from 'next/head';
import styles from '../styles/Home.module.css';

import React, { useRef, useState } from 'react';
import * as XLSX from 'xlsx/xlsx.mjs';

import { AppBar, Button, Box, Card, CardContent, IconButton, Toolbar, Container, Grid } from '@mui/material';
import MenuIcon from '@mui/icons-material/Menu';

const pageTitle = 'UNIPAテスト登録エディター';

const Component = () => {
  const fileInput = useRef(null);
  const [fileName, setFileName] = useState('');
  const [excelData, setExcelData] = useState('');

  const handleTriggerReadFile = () => {
    if (fileInput.current) {
      fileInput.current.click();
    };
  };

  const handleReadFile = (fileObj) => {
    if (fileObj) {
      setFileName(fileObj.name);
      fileObj.arrayBuffer().then((buffer) => {
        const workbook = XLSX.read(buffer, { type: 'buffer', bookVBA: true });
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];
        const data = XLSX.utils.sheet_to_json(worksheet);
        const json_array = data.map((x) => JSON.stringify(x) );
        setExcelData(json_array);
      });
    };
  };

  const displayData = (json_data) => {
    let list = [];
    const obj = json_data.map((x) => JSON.parse(x));
    let count = 1;  // keyを設定しないとエラーが出るため
    for (let row of obj) {
      const list_row = Object.keys(row).map((prop) => `${prop}: ${row[prop]}, `);
      list.push(
        <Card sx={{ m: 1 }} key={count++}>
          <CardContent>
            {list_row}
          </CardContent>
        </Card>
      );
    };
    console.log(obj);  // デバッグ用
    list.push(<Button onClick={() => {downloadExcel(obj)}} sx={{ p: 2 }} key="download">Download</Button>);
    return list;
  };

  const downloadExcel = (data) => {
    const exportBook = XLSX.utils.book_new();
   const exportSheet = XLSX.utils.json_to_sheet(data)
    XLSX.utils.book_append_sheet(exportBook, exportSheet, 'Sheet1');
    const fileName = 'export.xlsx';
    XLSX.writeFile(exportBook, fileName);
  };

  return (
      <div className={styles.container}>
          <p className={styles.desription}>Excelファイルをアップロードする</p>
          <Button sx={{ mb: 3 }}variant="contained" onClick={() => handleTriggerReadFile()}>ファイル選択</Button>

          {!!fileName && <p className={styles.desription}>ファイル名：{fileName}</p>}
          <form style={{ display: 'none' }}>
            <input
              type="file"
              accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
              ref={fileInput}
              onChange={(e) => {
                e.preventDefault()
                handleReadFile(e.currentTarget.files[0])
              }}
            />
          </form>
          {!!excelData && (
            displayData(excelData)
          )}
      </div>
  )
};

const Appbar = () => {
  return (
    <AppBar position="static">
    <Toolbar>
      <IconButton
        size="large"
        edge="start"
        color="inherit"
        aria-label="menu"
        sx={{ mr: 2 }}
      >
        <MenuIcon />
      </IconButton>
      {pageTitle}
    </Toolbar>
  </AppBar>
  )
};

const Index = () => {
  return (
    <div className={styles.container}>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {Appbar()}
        {Component()}
      </main>

      <footer className={styles.footer}>
        <p>&copy;2022 Hiroshima City University</p>
      </footer>
    </div>
  )
};

export default Index;